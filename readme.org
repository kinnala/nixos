#+TITLE: NixOS configuration files
#+AUTHOR: Tom Gustafsson

* Introduction

This repository contains my NixOS configuration.  My Emacs
configuration is in a [[https://github.com/kinnala/nixemacs/][different repository]].

* Define state using configuration.nix

In [[https://nixos.org/][NixOS]] the preferred state of the operating system is defined in a single
file, =/etc/nixos/configuration.nix=.  The following snippet is
=configuration.nix= for my Thinkpad Carbon X1 laptop:

#+begin_src nix :mkdirp yes :tangle /etc/nixos/configuration.nix
{ config, pkgs, ... }: {
  imports = [ ./hardware-configuration.nix ];

  nixpkgs.config.allowUnfree = true;

  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;
  boot.extraModulePackages = [ config.boot.kernelPackages.v4l2loopback ];

  networking.hostName = "tunkki";
  networking.networkmanager.enable = true;
  networking.useDHCP = false;
  networking.interfaces.enp0s31f6.useDHCP = true;
  networking.interfaces.wlp0s20f3.useDHCP = true;

  networking.firewall.allowedTCPPortRanges = [
    { from = 5000; to = 5003; }
  ];

  i18n.defaultLocale = "fi_FI.UTF-8";
  time.timeZone = "Europe/Helsinki";

  sound.enable = true;
  hardware.pulseaudio.enable = true;

  services.xserver.enable = true;
  services.xserver.layout = "fi";
  services.xserver.libinput.enable = true;
  services.xserver.libinput.tapping = false;
  services.xserver.displayManager.gdm.enable = true;
  services.xserver.desktopManager.gnome3.enable = true;

  services.printing.enable = true;
  services.printing.drivers = [ pkgs.gutenprint ];
  
  users.users.tom = {
    isNormalUser = true;
    home = "/home/tom";
    extraGroups = [ "wheel" "networkmanager" "docker" "vboxusers" ];
  };

  services.syncthing.enable = true;
  services.syncthing.user = "tom";
  services.syncthing.dataDir = "/home/tom/Sync";
  services.syncthing.configDir = "/home/tom/.config/syncthing";

  virtualisation.docker.enable = true;
  virtualisation.virtualbox.host.enable = true;

  system.stateVersion = "20.09";

  environment.systemPackages = with pkgs; [
    wget
    vim
    bash
    gnupg
    ripgrep
    htop
    gnumake
    xclip
    git
    tmux
    dropbox-cli
    google-chrome
    tree
    pass
    pinentry
    docker-compose
    unzip
    zip
    vlc
    texlive.combined.scheme-full
    conda
    gimp
    inkscape
    paraview
    imagemagick
    ffmpeg
    gphoto2
    thunderbird
    emacs
    firefox
  ];
  programs.gnupg.agent.enable = true;
  programs.geary.enable = false;
}
#+end_src

Adding a new package is as simple as modifying =configuration.nix= and running

#+begin_src sh :dir "/sudo::" :results output silent
sudo nixos-rebuild switch
#+end_src

The same applies to a full system reinstall.  In a fresh NixOS installation, I
can introduce Emacs into a temporary shell environment using =nix-shell -p
emacs= and /tangle/ this document via

#+begin_src sh :dir (concat "/sudo::" (expand-file-name ".")) :results output silent
sudo emacs --file readme.org --eval '(progn (org-babel-tangle) (kill-emacs))'
#+end_src

which writes =configuration.nix= and other configuration files defined by this
document into the paths expected by NixOS.
